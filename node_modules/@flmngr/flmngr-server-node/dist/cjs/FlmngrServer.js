"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlmngrServer = void 0;
const FileSystem_1 = require("./fs/FileSystem");
const MessageException_1 = require("./lib/MessageException");
const Message_1 = require("./model/Message");
class FlmngrServer {
    static flmngrRequest(config, on, framework) {
        return __awaiter(this, void 0, void 0, function* () {
            let resp;
            try {
                let codec = config.request.getParameterString("codec", "0");
                if (codec !== "0") {
                    config.request = FlmngrServer.decodeRequest(config.request, codec);
                    if (!!config.request) {
                        on.onLogError("Unknown codec = " + codec + " received from the client. You need to update the server side or check did you set Flmngr.codec correctly.");
                        on.onFinish(500, null, "An error occurred on the server side. Please check server logs.");
                        return;
                    }
                }
                let fileSystem = new FileSystem_1.FileSystem(config, !!config.request.getParameterString("embedPreviews", null), on.onLogError);
                let data = true;
                switch (config.request.getParameterString("action")) {
                    case "dirList":
                        data = fileSystem.reqGetDirs(config.request);
                        break;
                    case "dirCreate":
                        fileSystem.reqCreateDir(config.request);
                        break;
                    case "dirRename":
                        fileSystem.reqRename(config.request);
                        break;
                    case "dirDelete":
                        fileSystem.reqDeleteDir(config.request);
                        break;
                    case "dirCopy":
                        fileSystem.reqCopyDir(config.request);
                        break;
                    case "dirMove":
                        fileSystem.reqMove(config.request);
                        break;
                    case "fileListPaged":
                        data = fileSystem.reqGetFilesPaged(config.request);
                        break;
                    case "fileListSpecified":
                        data = fileSystem.reqGetFilesSpecified(config.request);
                        break;
                    case "fileDelete":
                        fileSystem.reqDeleteFiles(config.request);
                        break;
                    case "fileCopy":
                        fileSystem.reqCopyFiles(config.request);
                        break;
                    case "fileRename":
                        fileSystem.reqRename(config.request);
                        break;
                    case "fileMove":
                        fileSystem.reqMoveFiles(config.request);
                        break;
                    case "fileResize2":
                        data = yield fileSystem.reqResizeFile2(config.request);
                        break;
                    case "fileResize":
                        data = yield fileSystem.reqResizeFile(config.request);
                        break;
                    case "fileOriginal":
                        let resultReqGetImageOriginal = fileSystem.reqGetImageOriginal(config.request);
                        on.onFinish(200, {
                            "Content-Type": resultReqGetImageOriginal.mimeType
                        }, resultReqGetImageOriginal.readStream);
                        return;
                    case "filePreview":
                        let resultReqGetImagePreview = yield fileSystem.reqGetImagePreview(config.request);
                        on.onFinish(200, {
                            "Content-Type": resultReqGetImagePreview.mimeType
                        }, resultReqGetImagePreview.readStream);
                        return;
                    case "filePreviewAndResolution":
                        data = yield fileSystem.reqGetImagePreviewAndResolution(config.request);
                        break;
                    case "uploadFile":
                    case "upload":
                        data = fileSystem.reqUpload(config.request);
                        break;
                    case "getVersion":
                        data = yield fileSystem.reqGetVersion(config.request, framework);
                        break;
                    default:
                        throw new MessageException_1.MessageException(Message_1.Message.createMessage(false, Message_1.Message.ACTION_NOT_FOUND));
                }
                resp = {
                    error: null,
                    data: data
                };
            }
            catch (e) {
                if (e instanceof MessageException_1.MessageException) {
                    on.onLogError("MessageException '" + e.constructor.name + "' occurred. Message: " + e.message + "\n" + e.stack +
                        (!!e.getParentException() ?
                            "\nparent exception was '" + e.getParentException().name + "'. Message: " + e.getParentException().message + "\n" + e.getParentException().stack :
                            ""));
                    resp = {
                        error: e.getJSON(),
                        data: null
                    };
                }
                else if (e instanceof Error) {
                    on.onLogError("Exception '" + e.constructor.name + "' occurred. Message: " + e.message + "\n" + e.stack);
                    on.onFinish(500, null, "An error occurred on the server side. Please check server logs.");
                    return;
                }
            }
            if (!!resp.error) {
                on.onLogError("Action '" + config.request.getParameterString("action") + "' returned an error: " + resp.error);
            }
            on.onFinish(200, {
                "Content-Type": "application/json; charset=UTF-8"
            }, resp);
        });
    }
    static decodeRequest(request, codec) {
        if (codec === "1") {
            return {
                getParameterNumber(name, defaultValue) {
                    let decodedName = btoa(name);
                    let strValue = request.getParameterString(decodedName, null);
                    let isCorrectNumber = true;
                    if (strValue !== null) {
                        isCorrectNumber = "" + parseInt(strValue) === strValue;
                    }
                    else {
                        isCorrectNumber = false;
                    }
                    if (isCorrectNumber)
                        return parseInt(strValue);
                    else
                        return defaultValue;
                },
                getParameterString(name, defaultValue) {
                    let decodedName = btoa(name);
                    let value = request.getParameterString(decodedName, null);
                    if ((value === null) && typeof defaultValue === "string") {
                        return defaultValue;
                    }
                    if (!!value) {
                        return atob(value);
                    }
                    else {
                        return null;
                    }
                },
                getParameterStringArray(name, defaultValue) {
                    let decodedName = btoa(name);
                    let value = request.getParameterStringArray(decodedName, null);
                    if ((value === null) && Array.isArray(defaultValue)) {
                        return defaultValue;
                    }
                    if (!!value) {
                        return value.map(v => atob(v));
                    }
                    else {
                        return null;
                    }
                },
                getParameterFile(name) {
                    return request.getParameterFile(name);
                }
            };
        }
        return null;
    }
}
exports.FlmngrServer = FlmngrServer;
//# sourceMappingURL=FlmngrServer.js.map