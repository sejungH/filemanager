/// <reference types="node" />
/// <reference types="node" />
import { FlmngrConfig } from "../FlmngrConfig";
import { FlmngrRequest } from "../lib/FlmngrRequest";
import { FMDir } from "../model/FMDir";
import { ReadStream } from "fs";
export declare class FileSystem {
    protected embedPreviews: boolean;
    protected onLogError: (error: string) => void;
    private driverFiles;
    private driverCache;
    constructor(config: FlmngrConfig, embedPreviews: boolean, onLogError: (error: string) => void);
    private getRelativePath;
    reqGetDirs(request: FlmngrRequest): FMDir[];
    reqGetFilesPaged(request: FlmngrRequest): {
        files: {
            [key: string]: any;
        }[];
        countTotal: number;
        countFiltered: number;
        isEnd: boolean;
    };
    getFileStructure(dirPath: string, fileName: string): {
        [key: string]: any;
    };
    reqGetImagePreview(request: FlmngrRequest): Promise<{
        mimeType: string;
        readStream: ReadStream;
    }>;
    reqGetImagePreviewAndResolution(request: FlmngrRequest): Promise<{
        width: number;
        height: number;
        preview: string | null;
    }>;
    reqCopyDir(request: FlmngrRequest): void;
    reqCopyFiles(request: FlmngrRequest): void;
    private getCachedFile;
    private static PREVIEW_WIDTH;
    private static PREVIEW_HEIGHT;
    getCachedImageInfo(filePath: string): {
        [key: string]: any;
    };
    getCachedImagePreview(filePath: string, contents: Buffer): Promise<{
        mimeType: string;
        path: string;
        isPathFromCacheFolder: boolean;
    }>;
    getCachedImagePreviewAndResolution(filePath: string, contents: Buffer): Promise<{
        mimeType: string;
        path: string;
        isPathFromCacheFolder: boolean;
        width: number;
        height: number;
    }>;
    reqCreateDir(request: FlmngrRequest): void;
    reqDeleteDir(request: FlmngrRequest): void;
    reqMove(request: FlmngrRequest): void;
    reqRename(request: FlmngrRequest): void;
    reqMoveFiles(request: FlmngrRequest): void;
    protected updateFormatsAndClearCachePreviewForFile(filePath: string, formatSuffixes: string[] | null): void;
    reqDeleteFiles(request: FlmngrRequest): void;
    reqGetFilesSpecified(request: FlmngrRequest): {
        dir: string;
        file: {
            [key: string]: any;
        };
    }[];
    reqResizeFile(request: FlmngrRequest): Promise<string>;
    reqResizeFile2(request: FlmngrRequest): Promise<{
        url: string;
        width: number;
        height: number;
    }>;
    reqGetImageOriginal(request: FlmngrRequest): {
        mimeType: string;
        readStream: ReadStream;
    };
    reqGetVersion(req: FlmngrRequest, framework: string): any;
    reqUpload(request: FlmngrRequest): {
        file: {
            [key: string]: any;
        };
    };
    private profile;
}
//# sourceMappingURL=FileSystem.d.ts.map