import wcmatch from "./wildcard-match";
import { strnatcmp } from "./locutus/strnatcmp";
import * as fsx from "fs-extra";
export class Utils {
    static fmmatch(wildcardPattern, stringToTest, caseInsensitive) {
        return wcmatch(wildcardPattern, caseInsensitive ? { flags: "i" } : undefined)(stringToTest);
    }
    static strnatcmp(str1, str2) {
        return strnatcmp(str1, str2);
    }
    static getMimeType(filePath) {
        let mimeType = null;
        filePath = filePath.toLowerCase();
        if (filePath.endsWith(".png")) {
            mimeType = "image/png";
        }
        if (filePath.endsWith(".gif")) {
            mimeType = "image/gif";
        }
        if (filePath.endsWith(".bmp")) {
            mimeType = "image/bmp";
        }
        if (filePath.endsWith(".jpg") ||
            filePath.endsWith(".jpeg")) {
            mimeType = "image/jpeg";
        }
        if (filePath.endsWith(".webp")) {
            mimeType = "image/webp";
        }
        if (filePath.endsWith(".svg")) {
            mimeType = "image/svg+xml";
        }
        return mimeType;
    }
    static getNameWithoutExt(filename) {
        let ext = Utils.getExt(filename);
        if (ext == null)
            return filename;
        return filename.substring(0, filename.length - ext.length - 1);
    }
    static getExt(name) {
        let i = name.lastIndexOf('.');
        if (i > -1)
            return name.substring(i + 1);
        return '';
    }
    static getFreeFileName(dir, defaultName, alwaysWithIndex) {
        let ok;
        let i = alwaysWithIndex ? 0 : -1;
        let name;
        do {
            i++;
            if (i === 0)
                name = defaultName;
            else
                name = Utils.getNameWithoutExt(defaultName) + "_" + i + (Utils.getExt(defaultName) != null ? "." + Utils.getExt(defaultName) : "");
            let file = dir + name;
            ok = !fsx.existsSync(file);
        } while (!ok);
        return name;
    }
    static fixFileName(name) {
        let newName = "";
        for (let i = 0; i < name.length; i++) {
            let ch = name.substring(i, i + 1);
            if (Utils.PROHIBITED_SYMBOLS.indexOf(ch) > -1)
                ch = "_";
            newName += ch;
        }
        return newName.toString();
    }
    static isFileNameSyntaxOk(name) {
        if (name.length === 0 || name === "." || name.indexOf("..") > -1)
            return false;
        for (let i = 0; i < Utils.PROHIBITED_SYMBOLS.length; i++)
            if (name.indexOf(Utils.PROHIBITED_SYMBOLS.charAt(i)) > -1)
                return false;
        if (name.length > 260)
            return false;
        return true;
    }
    static isImage(name) {
        let exts = ["gif", "jpg", "jpeg", "png", "svg", "webp", "bmp"];
        let ext = Utils.getExt(name);
        for (let i = 0; i < exts.length; i++)
            if (exts[i] === ext)
                return true;
        return false;
    }
}
Utils.PROHIBITED_SYMBOLS = "/\\?%*:|\"<>";
//# sourceMappingURL=Utils.js.map