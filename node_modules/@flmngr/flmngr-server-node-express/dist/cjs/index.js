"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindFlmngr = void 0;
const body_parser_1 = __importDefault(require("body-parser"));
const express_1 = __importDefault(require("express"));
const cors = require('cors');
const busboy = require('connect-busboy');
const ExpressRequest_1 = require("./ExpressRequest");
const flmngr_server_node_1 = require("@flmngr/flmngr-server-node");
function bindFlmngr(config) {
    config.app.use(cors());
    config.app.use(busboy());
    config.app.use(config.urlFileManager, body_parser_1.default.json());
    config.app.use(config.urlFileManager, body_parser_1.default.urlencoded({ extended: true }));
    if (!!config.urlFiles) {
        config.app.use(config.urlFiles, express_1.default.static(config.dirFiles));
    }
    config.app.post(config.urlFileManager, (req, res) => {
        config.request = new ExpressRequest_1.ExpressRequest(req);
        let busboy = req.busboy;
        busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {
            if (fieldname === "file") {
                req["postFile"] = {
                    "filename": filename,
                    "data": null
                };
                file.on('data', function (data) {
                    let oldData = req["postFile"]["data"];
                    let newData = oldData == null ? data : Buffer.concat([oldData, data]);
                    req["postFile"]["data"] = newData;
                });
            }
        });
        busboy.on('field', (fieldname, val, fieldnameTruncated, valTruncated, encoding, mimetype) => {
            req.body[fieldname] = val;
        });
        busboy.on('finish', () => {
            flmngr_server_node_1.FlmngrServer.flmngrRequest(config, {
                onFinish: (httpStatusCode, headers, response) => {
                    for (const headerName in headers)
                        res.header(headerName, headers[headerName]);
                    res.statusCode = httpStatusCode;
                    if (typeof response === "string") {
                        res.send(response);
                    }
                    else if (typeof response === "object" && response.constructor.name === "ReadStream") {
                        response.pipe(res);
                    }
                    else {
                        res.json(response);
                    }
                },
                onLogError: (error) => {
                    config.onLogError || console.log(error);
                }
            }, config.overrideFramework || "express").then(r => { });
        });
        req.pipe(busboy);
    });
}
exports.bindFlmngr = bindFlmngr;
//# sourceMappingURL=index.js.map